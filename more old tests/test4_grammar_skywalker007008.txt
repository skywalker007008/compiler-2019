CONSTTK const
INTTK int
IDENFR CompareEqual
ASSIGN =
INTCON 0
<无符号整数>
<整数>
COMMA ,
IDENFR CompareNotEqual
ASSIGN =
INTCON 1
<无符号整数>
<整数>
COMMA ,
IDENFR CompareLess
ASSIGN =
INTCON 2
<无符号整数>
<整数>
COMMA ,
IDENFR CompareLessEqual
ASSIGN =
INTCON 3
<无符号整数>
<整数>
COMMA ,
IDENFR CompareGreater
ASSIGN =
INTCON 4
<无符号整数>
<整数>
COMMA ,
IDENFR CompareGreaterEqual
ASSIGN =
INTCON 5
<无符号整数>
<整数>
<常量定义>
SEMICN ;
<常量说明>
VOIDTK void
IDENFR TokenTest_String
LPARENT (
<参数表>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON 
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
STRCON 1
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
STRCON \n\t\f\r\\\'\a\b
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
STRCON  !#$%&'()*+,-./
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
STRCON 0123456789:;<=>?
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
STRCON @ABCDEFGHIJKLMNOPQRSTUVWXYZ
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
STRCON [\]^_`abcdefghijklmnopqrstuvwxyz{|}~
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR TokenTest_Number
LPARENT (
<参数表>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
INTCON 123456
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
MINU -
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
PLUS +
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
PLUS +
INTCON 12345
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
MINU -
INTCON 12345
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR TokenTest_Character
LPARENT (
<参数表>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
CHARCON +
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
CHARCON -
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
CHARCON *
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
CHARCON /
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
CHARCON a
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
CHARCON b
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
CHARCON c
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
CHARCON d
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
CHARCON 0
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
CHARCON 1
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
CHARCON 2
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
CHARCON 3
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR TokenTest_Identifier
LPARENT (
<参数表>
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR _UnderscoreLead
ASSIGN =
INTCON 1
<无符号整数>
<整数>
<常量定义>
SEMICN ;
CONSTTK const
INTTK int
IDENFR UNDERSCORETAIL_
ASSIGN =
INTCON 2
<无符号整数>
<整数>
<常量定义>
SEMICN ;
CONSTTK const
INTTK int
IDENFR OneApple_2Banana_3PineApple
ASSIGN =
INTCON 3
<无符号整数>
<整数>
<常量定义>
SEMICN ;
<常量说明>
PRINTFTK printf
LPARENT (
IDENFR _UnderscoreLead
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
IDENFR UNDERSCORETAIL_
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
IDENFR OneApple_2Banana_3PineApple
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR TokenTest_CaseIgnored
LPARENT (
<参数表>
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR ALL_UPPER_INT_CONSTANT
ASSIGN =
INTCON 1
<无符号整数>
<整数>
<常量定义>
SEMICN ;
<常量说明>
PRINTFTK printf
LPARENT (
IDENFR ALL_UPPER_INT_CONSTANT
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_BinOp
LPARENT (
<参数表>
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR IntConstant
ASSIGN =
INTCON 1
<无符号整数>
<整数>
<常量定义>
SEMICN ;
CONSTTK const
CHARTK char
IDENFR CharConstant
ASSIGN =
CHARCON a
<常量定义>
SEMICN ;
<常量说明>
PRINTFTK printf
LPARENT (
IDENFR IntConstant
<因子>
<项>
PLUS +
IDENFR CharConstant
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
IDENFR IntConstant
<因子>
<项>
MINU -
IDENFR CharConstant
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
IDENFR IntConstant
<因子>
MULT *
IDENFR CharConstant
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
IDENFR IntConstant
<因子>
DIV /
IDENFR CharConstant
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_ParenExpr
LPARENT (
<参数表>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON Deeply Nested ParenExpr
<字符串>
COMMA ,
LPARENT (
LPARENT (
LPARENT (
LPARENT (
LPARENT (
LPARENT (
LPARENT (
LPARENT (
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
PLUS +
LPARENT (
INTCON 2
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<因子>
MULT *
LPARENT (
LPARENT (
INTCON 3
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
MINU -
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<因子>
DIV /
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
MULT *
INTCON 3
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
MINU -
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
PLUS +
LPARENT (
INTCON 3
<无符号整数>
<整数>
<因子>
MULT *
INTCON 4
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_UnaryOp
LPARENT (
<参数表>
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR IntConstant
ASSIGN =
INTCON 1
<无符号整数>
<整数>
<常量定义>
SEMICN ;
CONSTTK const
CHARTK char
IDENFR CharConstant
ASSIGN =
CHARCON a
<常量定义>
SEMICN ;
<常量说明>
PRINTFTK printf
LPARENT (
MINU -
IDENFR IntConstant
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
PLUS +
IDENFR IntConstant
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
MINU -
IDENFR CharConstant
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
PLUS +
IDENFR CharConstant
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
MINU -
LPARENT (
MINU -
IDENFR IntConstant
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
PLUS +
LPARENT (
PLUS +
IDENFR IntConstant
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
MINU -
LPARENT (
MINU -
LPARENT (
MINU -
LPARENT (
IDENFR IntConstant
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_Subscript
LPARENT (
<参数表>
RPARENT )
LBRACE {
INTTK int
IDENFR IntArray
LBRACK [
INTCON 2
<无符号整数>
RBRACK ]
<变量定义>
SEMICN ;
CHARTK char
IDENFR CharArray
LBRACK [
INTCON 2
<无符号整数>
RBRACK ]
<变量定义>
SEMICN ;
<变量说明>
PRINTFTK printf
LPARENT (
IDENFR IntArray
LBRACK [
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RBRACK ]
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
IDENFR CharArray
LBRACK [
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RBRACK ]
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_FunctionVoid_Void
LPARENT (
<参数表>
RPARENT )
LBRACE {
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
INTTK int
IDENFR Test_FunctionInt_Int
<声明头部>
LPARENT (
INTTK int
IDENFR Int1
<参数表>
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR Int1
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<有返回值函数定义>
CHARTK char
IDENFR Test_FunctionChar_IntChar
<声明头部>
LPARENT (
INTTK int
IDENFR Int1
COMMA ,
CHARTK char
IDENFR Char2
<参数表>
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR Char2
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<有返回值函数定义>
INTTK int
IDENFR Test_FunctionInt_CharCharChar
<声明头部>
LPARENT (
CHARTK char
IDENFR Char1
COMMA ,
CHARTK char
IDENFR Char2
COMMA ,
CHARTK char
IDENFR Char3
<参数表>
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<有返回值函数定义>
VOIDTK void
IDENFR Test_Call
LPARENT (
<参数表>
RPARENT )
LBRACE {
IDENFR Test_FunctionVoid_Void
LPARENT (
<值参数表>
RPARENT )
<无返回值函数调用语句>
SEMICN ;
<语句>
IDENFR Test_FunctionInt_Int
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<值参数表>
RPARENT )
<有返回值函数调用语句>
SEMICN ;
<语句>
IDENFR Test_FunctionChar_IntChar
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
COMMA ,
CHARCON a
<因子>
<项>
<表达式>
<值参数表>
RPARENT )
<有返回值函数调用语句>
SEMICN ;
<语句>
IDENFR Test_FunctionInt_CharCharChar
LPARENT (
CHARCON a
<因子>
<项>
<表达式>
COMMA ,
CHARCON b
<因子>
<项>
<表达式>
COMMA ,
CHARCON c
<因子>
<项>
<表达式>
<值参数表>
RPARENT )
<有返回值函数调用语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_Expr
LPARENT (
<参数表>
RPARENT )
LBRACE {
INTTK int
IDENFR SingleIntVariable
COMMA ,
IDENFR IntArray
LBRACK [
INTCON 2
<无符号整数>
RBRACK ]
<变量定义>
SEMICN ;
<变量说明>
IDENFR SingleIntVariable
ASSIGN =
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
IDENFR IntArray
LBRACK [
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RBRACK ]
ASSIGN =
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
IDENFR IntArray
LBRACK [
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RBRACK ]
ASSIGN =
INTCON 2
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
LPARENT (
IDENFR SingleIntVariable
<因子>
MULT *
LPARENT (
LPARENT (
IDENFR SingleIntVariable
<因子>
<项>
MINU -
INTCON 2
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<因子>
DIV /
LPARENT (
LPARENT (
IDENFR SingleIntVariable
<因子>
<项>
PLUS +
IDENFR IntArray
LBRACK [
IDENFR IntArray
LBRACK [
IDENFR SingleIntVariable
<因子>
<项>
<表达式>
RBRACK ]
<因子>
<项>
<表达式>
RBRACK ]
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
PLUS +
IDENFR IntArray
LBRACK [
IDENFR SingleIntVariable
<因子>
<项>
<表达式>
RBRACK ]
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
LPARENT (
IDENFR SingleIntVariable
<因子>
<项>
PLUS +
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<因子>
MULT *
LPARENT (
IDENFR IntArray
LBRACK [
IDENFR SingleIntVariable
<因子>
MULT *
INTCON 2
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RBRACK ]
<因子>
MULT *
INTCON 2
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
IDENFR IntArray
LBRACK [
INTCON 0
<无符号整数>
<整数>
<因子>
MULT *
LPARENT (
IDENFR SingleIntVariable
<因子>
MULT *
IDENFR SingleIntVariable
<因子>
MULT *
IDENFR SingleIntVariable
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RBRACK ]
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
IDENFR IntArray
LBRACK [
INTCON 0
<无符号整数>
<整数>
<因子>
MULT *
LPARENT (
IDENFR IntArray
LBRACK [
IDENFR SingleIntVariable
<因子>
<项>
<表达式>
RBRACK ]
<因子>
MULT *
INTCON 4
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
PLUS +
IDENFR SingleIntVariable
<因子>
<项>
MINU -
IDENFR SingleIntVariable
<因子>
<项>
<表达式>
RBRACK ]
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_Empty
LPARENT (
<参数表>
RPARENT )
LBRACE {
INTTK int
IDENFR i
<变量定义>
SEMICN ;
<变量说明>
SEMICN ;
<语句>
LBRACE {
<语句列>
RBRACE }
<语句>
SEMICN ;
<语句>
SEMICN ;
<语句>
SEMICN ;
<语句>
LBRACE {
SEMICN ;
<语句>
SEMICN ;
<语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
LBRACE {
LBRACE {
<语句列>
RBRACE }
<语句>
LBRACE {
<语句列>
RBRACE }
<语句>
LBRACE {
<语句列>
RBRACE }
<语句>
<语句列>
RBRACE }
<语句>
LBRACE {
LBRACE {
LBRACE {
<语句列>
RBRACE }
<语句>
<语句列>
RBRACE }
<语句>
<语句列>
RBRACE }
<语句>
LBRACE {
LBRACE {
LBRACE {
<语句列>
RBRACE }
<语句>
<语句列>
RBRACE }
<语句>
LBRACE {
<语句列>
RBRACE }
<语句>
LBRACE {
<语句列>
RBRACE }
<语句>
<语句列>
RBRACE }
<语句>
LBRACE {
SEMICN ;
<语句>
LBRACE {
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<语句列>
RBRACE }
<语句>
WHILETK while
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
SEMICN ;
<语句>
<循环语句>
<语句>
WHILETK while
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
IFTK if
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
SEMICN ;
<语句>
<条件语句>
<语句>
IFTK if
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
<语句列>
RBRACE }
<语句>
<条件语句>
<语句>
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
SEMICN ;
IDENFR i
<因子>
<项>
<表达式>
<条件>
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
<无符号整数>
<步长>
RPARENT )
SEMICN ;
<语句>
<循环语句>
<语句>
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
SEMICN ;
IDENFR i
<因子>
<项>
<表达式>
<条件>
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
<无符号整数>
<步长>
RPARENT )
LBRACE {
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_Read
LPARENT (
<参数表>
RPARENT )
LBRACE {
INTTK int
IDENFR SingleIntVariable
<变量定义>
SEMICN ;
CHARTK char
IDENFR SingleCharVariable
<变量定义>
SEMICN ;
INTTK int
IDENFR _1
COMMA ,
IDENFR _2
COMMA ,
IDENFR _3
<变量定义>
SEMICN ;
CHARTK char
IDENFR _4
COMMA ,
IDENFR _5
COMMA ,
IDENFR _6
<变量定义>
SEMICN ;
<变量说明>
SCANFTK scanf
LPARENT (
IDENFR SingleIntVariable
RPARENT )
<读语句>
SEMICN ;
<语句>
SCANFTK scanf
LPARENT (
IDENFR SingleCharVariable
RPARENT )
<读语句>
SEMICN ;
<语句>
SCANFTK scanf
LPARENT (
IDENFR _1
COMMA ,
IDENFR _2
COMMA ,
IDENFR _3
RPARENT )
<读语句>
SEMICN ;
<语句>
SCANFTK scanf
LPARENT (
IDENFR _4
COMMA ,
IDENFR _5
COMMA ,
IDENFR _6
RPARENT )
<读语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_Write
LPARENT (
<参数表>
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR IntConstant
ASSIGN =
INTCON 1
<无符号整数>
<整数>
<常量定义>
SEMICN ;
<常量说明>
INTTK int
IDENFR IntArray
LBRACK [
INTCON 2
<无符号整数>
RBRACK ]
<变量定义>
SEMICN ;
<变量说明>
PRINTFTK printf
LPARENT (
STRCON SingleString
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
IDENFR IntArray
LBRACK [
IDENFR IntConstant
<因子>
<项>
<表达式>
RBRACK ]
<因子>
<项>
PLUS +
IDENFR IntArray
LBRACK [
IDENFR IntConstant
<因子>
<项>
<表达式>
RBRACK ]
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
STRCON StringAndExpression
<字符串>
COMMA ,
IDENFR IntConstant
<因子>
MULT *
IDENFR IntArray
LBRACK [
IDENFR IntArray
LBRACK [
IDENFR IntConstant
<因子>
<项>
<表达式>
RBRACK ]
<因子>
<项>
<表达式>
RBRACK ]
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_Return_Void
LPARENT (
<参数表>
RPARENT )
LBRACE {
RETURNTK return
<返回语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
CHARTK char
IDENFR Test_Return_Char
<声明头部>
LPARENT (
<参数表>
RPARENT )
LBRACE {
CONSTTK const
CHARTK char
IDENFR CharConstant
ASSIGN =
CHARCON a
<常量定义>
SEMICN ;
<常量说明>
CHARTK char
IDENFR CharArray
LBRACK [
INTCON 2
<无符号整数>
RBRACK ]
<变量定义>
SEMICN ;
CHARTK char
IDENFR CharVariable
<变量定义>
SEMICN ;
<变量说明>
RETURNTK return
LPARENT (
IDENFR CharVariable
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
RETURNTK return
LPARENT (
IDENFR CharArray
LBRACK [
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RBRACK ]
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
RETURNTK return
LPARENT (
IDENFR CharConstant
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
RETURNTK return
LPARENT (
IDENFR Test_Return_Char
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
RETURNTK return
LPARENT (
CHARCON a
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<有返回值函数定义>
INTTK int
IDENFR Test_Return_Int
<声明头部>
LPARENT (
<参数表>
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR IntConstant
ASSIGN =
INTCON 1
<无符号整数>
<整数>
<常量定义>
SEMICN ;
<常量说明>
INTTK int
IDENFR IntArray
LBRACK [
INTCON 2
<无符号整数>
RBRACK ]
<变量定义>
SEMICN ;
INTTK int
IDENFR IntVariable
<变量定义>
SEMICN ;
<变量说明>
RETURNTK return
LPARENT (
IDENFR IntConstant
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
RETURNTK return
LPARENT (
IDENFR IntVariable
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
RETURNTK return
LPARENT (
IDENFR Test_Return_Int
LPARENT (
<值参数表>
RPARENT )
<有返回值函数调用语句>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
RETURNTK return
LPARENT (
IDENFR IntArray
LBRACK [
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RBRACK ]
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
RETURNTK return
LPARENT (
IDENFR IntArray
LBRACK [
LPARENT (
IDENFR IntVariable
<因子>
<项>
<表达式>
RPARENT )
<因子>
<项>
<表达式>
RBRACK ]
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
RETURNTK return
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<有返回值函数定义>
VOIDTK void
IDENFR Test_Compound_Empty
LPARENT (
<参数表>
RPARENT )
LBRACE {
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_Compound_NoConstDecl
LBRACE {
INTTK int
IDENFR IntVariable
<变量定义>
SEMICN ;
<变量说明>
PRINTFTK printf
LPARENT (
IDENFR IntVariable
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_Compound_NoVarDecl
LPARENT (
<参数表>
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR IntConstant
ASSIGN =
INTCON 1
<无符号整数>
<整数>
<常量定义>
SEMICN ;
<常量说明>
PRINTFTK printf
LPARENT (
IDENFR IntConstant
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_Compound_NoStmts
LPARENT (
<参数表>
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR IntConstant
ASSIGN =
INTCON 1
<无符号整数>
<整数>
<常量定义>
SEMICN ;
<常量说明>
INTTK int
IDENFR IntVariable
<变量定义>
SEMICN ;
<变量说明>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_If
LPARENT (
<参数表>
RPARENT )
LBRACE {
INTTK int
IDENFR Number
<变量定义>
SEMICN ;
<变量说明>
IFTK if
LPARENT (
IDENFR Number
<因子>
<项>
PLUS +
IDENFR Number
<因子>
MULT *
IDENFR Number
<因子>
DIV /
INTCON 2
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON Condition ::= Expr
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<条件语句>
<语句>
IFTK if
LPARENT (
IDENFR Number
<因子>
<项>
PLUS +
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
LEQ <=
INTCON 2
<无符号整数>
<整数>
<因子>
MULT *
IDENFR Number
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON Condition ::= Expr CompareOp Expr
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<条件语句>
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_For
LPARENT (
<参数表>
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR Limit
ASSIGN =
INTCON 10
<无符号整数>
<整数>
<常量定义>
SEMICN ;
<常量说明>
INTTK int
IDENFR I
<变量定义>
SEMICN ;
<变量说明>
PRINTFTK printf
LPARENT (
STRCON Incremental for
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
FORTK for
LPARENT (
IDENFR I
ASSIGN =
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
SEMICN ;
IDENFR I
<因子>
<项>
<表达式>
LSS <
IDENFR Limit
<因子>
<项>
<表达式>
<条件>
SEMICN ;
IDENFR I
ASSIGN =
IDENFR I
PLUS +
INTCON 1
<无符号整数>
<步长>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON I = 
<字符串>
COMMA ,
IDENFR I
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
PRINTFTK printf
LPARENT (
STRCON Decremental for
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
FORTK for
LPARENT (
IDENFR I
ASSIGN =
IDENFR Limit
<因子>
<项>
<表达式>
SEMICN ;
IDENFR I
<因子>
<项>
<表达式>
GEQ >=
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
SEMICN ;
IDENFR I
ASSIGN =
IDENFR I
MINU -
INTCON 1
<无符号整数>
<步长>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON I = 
<字符串>
COMMA ,
IDENFR I
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
PRINTFTK printf
LPARENT (
STRCON for: execute only once
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
FORTK for
LPARENT (
IDENFR I
ASSIGN =
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
SEMICN ;
IDENFR I
<因子>
<项>
<表达式>
GRE >
IDENFR Limit
<因子>
<项>
<表达式>
<条件>
SEMICN ;
IDENFR I
ASSIGN =
IDENFR I
MINU -
INTCON 1
<无符号整数>
<步长>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON I = 
<字符串>
COMMA ,
IDENFR I
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_While
LPARENT (
<参数表>
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR Limit
ASSIGN =
INTCON 10
<无符号整数>
<整数>
<常量定义>
SEMICN ;
<常量说明>
INTTK int
IDENFR I
<变量定义>
SEMICN ;
<变量说明>
PRINTFTK printf
LPARENT (
STRCON Incremental while
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
IDENFR I
ASSIGN =
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
WHILETK while
LPARENT (
IDENFR I
<因子>
<项>
<表达式>
LSS <
IDENFR Limit
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON I = 
<字符串>
COMMA ,
IDENFR I
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
IDENFR I
ASSIGN =
IDENFR I
<因子>
<项>
PLUS +
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
PRINTFTK printf
LPARENT (
STRCON Decremental while
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
IDENFR I
ASSIGN =
IDENFR Limit
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
WHILETK while
LPARENT (
IDENFR I
<因子>
<项>
<表达式>
GEQ >=
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON I = 
<字符串>
COMMA ,
IDENFR I
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
IDENFR I
ASSIGN =
IDENFR I
<因子>
<项>
MINU -
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
IDENFR I
ASSIGN =
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
WHILETK while
LPARENT (
IDENFR I
<因子>
<项>
<表达式>
GRE >
IDENFR Limit
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON Never while
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_Assign
LPARENT (
<参数表>
RPARENT )
LBRACE {
INTTK int
IDENFR SingleIntVariable
COMMA ,
IDENFR IntArray
LBRACK [
INTCON 2
<无符号整数>
RBRACK ]
<变量定义>
SEMICN ;
<变量说明>
IDENFR SingleIntVariable
ASSIGN =
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
IDENFR IntArray
LBRACK [
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RBRACK ]
ASSIGN =
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
IDENFR IntArray
LBRACK [
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RBRACK ]
ASSIGN =
INTCON 2
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR Test_Stmt
LPARENT (
<参数表>
RPARENT )
LBRACE {
INTTK int
IDENFR i
<变量定义>
SEMICN ;
<变量说明>
IFTK if
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 2
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 3
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON if if if
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON if if else
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<条件语句>
<语句>
<语句列>
RBRACE }
<语句>
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON if else
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<条件语句>
<语句>
<语句列>
RBRACE }
<语句>
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON else
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<条件语句>
<语句>
WHILETK while
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
WHILETK while
LPARENT (
INTCON 2
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
WHILETK while
LPARENT (
INTCON 3
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON while while while
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
IFTK if
LPARENT (
INTCON 3
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON while while if
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
SEMICN ;
IDENFR i
<因子>
<项>
<表达式>
LSS <
INTCON 4
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
<无符号整数>
<步长>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON while while if for
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
<语句列>
RBRACE }
<语句>
<条件语句>
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
SEMICN ;
IDENFR i
<因子>
<项>
<表达式>
LSS <
INTCON 2
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
<无符号整数>
<步长>
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
SEMICN ;
IDENFR i
<因子>
<项>
<表达式>
LSS <
INTCON 3
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
<无符号整数>
<步长>
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
SEMICN ;
IDENFR i
<因子>
<项>
<表达式>
LSS <
INTCON 4
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
<无符号整数>
<步长>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON while for for for
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
IFTK if
LPARENT (
INTCON 5
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON while for for for if
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<条件语句>
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
PRINTFTK printf
LPARENT (
STRCON while
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
IFTK if
LPARENT (
INTCON 2
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON while if
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
WHILETK while
LPARENT (
INTCON 3
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
WHILETK while
LPARENT (
INTCON 4
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
SEMICN ;
IDENFR i
<因子>
<项>
<表达式>
LSS <
INTCON 5
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
<无符号整数>
<步长>
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON while if while while for
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
<语句列>
RBRACE }
<语句>
<条件语句>
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
INTTK int
IDENFR ThreeWaysCompare
<声明头部>
LPARENT (
INTTK int
IDENFR A
COMMA ,
INTTK int
IDENFR B
<参数表>
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR A
<因子>
<项>
<表达式>
GRE >
IDENFR B
<因子>
<项>
<表达式>
<条件>
RPARENT )
RETURNTK return
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<条件语句>
<语句>
IFTK if
LPARENT (
IDENFR A
<因子>
<项>
<表达式>
LSS <
IDENFR B
<因子>
<项>
<表达式>
<条件>
RPARENT )
RETURNTK return
LPARENT (
MINU -
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<条件语句>
<语句>
RETURNTK return
LPARENT (
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<有返回值函数定义>
INTTK int
IDENFR RichCompare
<声明头部>
LPARENT (
INTTK int
IDENFR A
COMMA ,
INTTK int
IDENFR B
COMMA ,
INTTK int
IDENFR CompareOp
<参数表>
RPARENT )
LBRACE {
INTTK int
IDENFR Order
<变量定义>
SEMICN ;
<变量说明>
IDENFR Order
ASSIGN =
IDENFR ThreeWaysCompare
LPARENT (
IDENFR A
<因子>
<项>
<表达式>
COMMA ,
IDENFR B
<因子>
<项>
<表达式>
<值参数表>
RPARENT )
<有返回值函数调用语句>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
IFTK if
LPARENT (
IDENFR CompareOp
<因子>
<项>
<表达式>
EQL ==
IDENFR CompareEqual
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR Order
<因子>
<项>
<表达式>
EQL ==
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
RETURNTK return
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
ELSETK else
RETURNTK return
LPARENT (
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<条件语句>
<语句>
<语句列>
RBRACE }
<语句>
ELSETK else
IFTK if
LPARENT (
IDENFR CompareOp
<因子>
<项>
<表达式>
EQL ==
IDENFR CompareLess
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR Order
<因子>
<项>
<表达式>
EQL ==
MINU -
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
RETURNTK return
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
ELSETK else
RETURNTK return
LPARENT (
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<条件语句>
<语句>
<语句列>
RBRACE }
<语句>
ELSETK else
IFTK if
LPARENT (
IDENFR CompareOp
<因子>
<项>
<表达式>
EQL ==
IDENFR CompareGreater
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR Order
<因子>
<项>
<表达式>
EQL ==
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
RETURNTK return
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
ELSETK else
RETURNTK return
LPARENT (
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<条件语句>
<语句>
<语句列>
RBRACE }
<语句>
ELSETK else
IFTK if
LPARENT (
IDENFR CompareOp
<因子>
<项>
<表达式>
EQL ==
IDENFR CompareNotEqual
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
IDENFR Order
ASSIGN =
IDENFR RichCompare
LPARENT (
IDENFR A
<因子>
<项>
<表达式>
COMMA ,
IDENFR B
<因子>
<项>
<表达式>
COMMA ,
IDENFR CompareEqual
<因子>
<项>
<表达式>
<值参数表>
RPARENT )
<有返回值函数调用语句>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
IFTK if
LPARENT (
IDENFR Order
<因子>
<项>
<表达式>
<条件>
RPARENT )
RETURNTK return
LPARENT (
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
ELSETK else
RETURNTK return
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<条件语句>
<语句>
<语句列>
RBRACE }
<语句>
ELSETK else
IFTK if
LPARENT (
IDENFR CompareOp
<因子>
<项>
<表达式>
EQL ==
IDENFR CompareLessEqual
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
IDENFR Order
ASSIGN =
IDENFR RichCompare
LPARENT (
IDENFR A
<因子>
<项>
<表达式>
COMMA ,
IDENFR B
<因子>
<项>
<表达式>
COMMA ,
IDENFR CompareGreater
<因子>
<项>
<表达式>
<值参数表>
RPARENT )
<有返回值函数调用语句>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
IFTK if
LPARENT (
IDENFR Order
<因子>
<项>
<表达式>
<条件>
RPARENT )
RETURNTK return
LPARENT (
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
ELSETK else
RETURNTK return
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<条件语句>
<语句>
<语句列>
RBRACE }
<语句>
ELSETK else
IFTK if
LPARENT (
IDENFR CompareOp
<因子>
<项>
<表达式>
EQL ==
IDENFR CompareGreaterEqual
<因子>
<项>
<表达式>
<条件>
RPARENT )
LBRACE {
IDENFR Order
ASSIGN =
IDENFR RichCompare
LPARENT (
IDENFR A
<因子>
<项>
<表达式>
COMMA ,
IDENFR B
<因子>
<项>
<表达式>
COMMA ,
IDENFR CompareLess
<因子>
<项>
<表达式>
<值参数表>
RPARENT )
<有返回值函数调用语句>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
IFTK if
LPARENT (
IDENFR Order
<因子>
<项>
<表达式>
<条件>
RPARENT )
RETURNTK return
LPARENT (
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
ELSETK else
RETURNTK return
LPARENT (
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<条件语句>
<语句>
<语句列>
RBRACE }
<语句>
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON Unknown CompareOp: 
<字符串>
COMMA ,
IDENFR CompareOp
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
RETURNTK return
LPARENT (
MINU -
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<条件语句>
<语句>
<条件语句>
<语句>
<条件语句>
<语句>
<条件语句>
<语句>
<条件语句>
<语句>
<条件语句>
<语句>
RETURNTK return
LPARENT (
MINU -
INTCON 1
<无符号整数>
<整数>
<因子>
<项>
<表达式>
RPARENT )
<返回语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<有返回值函数定义>
VOIDTK void
IDENFR PrintCompareOp
LPARENT (
INTTK int
IDENFR Op
<参数表>
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR Op
<因子>
<项>
<表达式>
EQL ==
IDENFR CompareEqual
<因子>
<项>
<表达式>
<条件>
RPARENT )
PRINTFTK printf
LPARENT (
STRCON CompareEqual
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
ELSETK else
IFTK if
LPARENT (
IDENFR Op
<因子>
<项>
<表达式>
EQL ==
IDENFR CompareNotEqual
<因子>
<项>
<表达式>
<条件>
RPARENT )
PRINTFTK printf
LPARENT (
STRCON CompareNotEqual
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
ELSETK else
IFTK if
LPARENT (
IDENFR Op
<因子>
<项>
<表达式>
EQL ==
IDENFR CompareLess
<因子>
<项>
<表达式>
<条件>
RPARENT )
PRINTFTK printf
LPARENT (
STRCON CompareLess
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
ELSETK else
IFTK if
LPARENT (
IDENFR Op
<因子>
<项>
<表达式>
EQL ==
IDENFR CompareLessEqual
<因子>
<项>
<表达式>
<条件>
RPARENT )
PRINTFTK printf
LPARENT (
STRCON CompareLessEqual
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
ELSETK else
IFTK if
LPARENT (
IDENFR Op
<因子>
<项>
<表达式>
EQL ==
IDENFR CompareGreater
<因子>
<项>
<表达式>
<条件>
RPARENT )
PRINTFTK printf
LPARENT (
STRCON CompareGreater
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
ELSETK else
IFTK if
LPARENT (
IDENFR Op
<因子>
<项>
<表达式>
EQL ==
IDENFR CompareGreaterEqual
<因子>
<项>
<表达式>
<条件>
RPARENT )
PRINTFTK printf
LPARENT (
STRCON CompareGreaterEqual
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
ELSETK else
PRINTFTK printf
LPARENT (
STRCON Unknown CompareOp
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
<条件语句>
<语句>
<条件语句>
<语句>
<条件语句>
<语句>
<条件语句>
<语句>
<条件语句>
<语句>
<条件语句>
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR PrintAllCompareOp
LPARENT (
<参数表>
RPARENT )
LBRACE {
INTTK int
IDENFR I
<变量定义>
SEMICN ;
<变量说明>
FORTK for
LPARENT (
IDENFR I
ASSIGN =
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
SEMICN ;
IDENFR I
<因子>
<项>
<表达式>
LSS <
INTCON 6
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
SEMICN ;
IDENFR I
ASSIGN =
IDENFR I
PLUS +
INTCON 1
<无符号整数>
<步长>
RPARENT )
LBRACE {
IDENFR PrintCompareOp
LPARENT (
IDENFR I
<因子>
<项>
<表达式>
<值参数表>
RPARENT )
<无返回值函数调用语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
IDENFR I
<因子>
<项>
<表达式>
RPARENT )
<写语句>
SEMICN ;
<语句>
<语句列>
RBRACE }
<语句>
<循环语句>
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
IDENFR PrintResult
LPARENT (
INTTK int
IDENFR Bool
<参数表>
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR Bool
<因子>
<项>
<表达式>
<条件>
RPARENT )
PRINTFTK printf
LPARENT (
STRCON Result: true
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
ELSETK else
PRINTFTK printf
LPARENT (
STRCON Result: false
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
<条件语句>
<语句>
<语句列>
<复合语句>
RBRACE }
<无返回值函数定义>
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR A
COMMA ,
IDENFR B
COMMA ,
IDENFR CompareOp
<变量定义>
SEMICN ;
INTTK int
IDENFR Result
<变量定义>
SEMICN ;
<变量说明>
IDENFR PrintAllCompareOp
LPARENT (
<值参数表>
RPARENT )
<无返回值函数调用语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
STRCON Please input two integers:
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
SCANFTK scanf
LPARENT (
IDENFR A
COMMA ,
IDENFR B
RPARENT )
<读语句>
SEMICN ;
<语句>
PRINTFTK printf
LPARENT (
STRCON Please input an integer for CompareOp:
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
SCANFTK scanf
LPARENT (
IDENFR CompareOp
RPARENT )
<读语句>
SEMICN ;
<语句>
IDENFR Result
ASSIGN =
IDENFR RichCompare
LPARENT (
IDENFR A
<因子>
<项>
<表达式>
COMMA ,
IDENFR B
<因子>
<项>
<表达式>
COMMA ,
IDENFR CompareOp
<因子>
<项>
<表达式>
<值参数表>
RPARENT )
<有返回值函数调用语句>
<因子>
<项>
<表达式>
<赋值语句>
SEMICN ;
<语句>
IFTK if
LPARENT (
IDENFR Result
<因子>
<项>
<表达式>
LSS <
INTCON 0
<无符号整数>
<整数>
<因子>
<项>
<表达式>
<条件>
RPARENT )
RETURNTK return
<返回语句>
SEMICN ;
<语句>
<条件语句>
<语句>
PRINTFTK printf
LPARENT (
STRCON 
<字符串>
RPARENT )
<写语句>
SEMICN ;
<语句>
IDENFR PrintCompareOp
LPARENT (
IDENFR CompareOp
<因子>
<项>
<表达式>
<值参数表>
RPARENT )
<无返回值函数调用语句>
SEMICN ;
<语句>
IDENFR PrintResult
LPARENT (
IDENFR Result
<因子>
<项>
<表达式>
<值参数表>
RPARENT )
<无返回值函数调用语句>
SEMICN ;
<语句>
<语句列>
<复合语句>
RBRACE }
<主函数>
<程序>
